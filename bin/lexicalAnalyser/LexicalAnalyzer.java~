/* The following code was generated by JFlex 1.6.1 */

package lexicalAnalyser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/tobiasmartins/eclipse-workspace/lexicalanalyzer/src/lexicalAnalyser/language_php.lex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\5\1\60\1\60\1\60\22\0\1\26\1\46\1\61"+
    "\1\0\1\7\1\53\1\54\1\61\1\36\1\37\1\6\1\51\1\61"+
    "\1\52\1\3\1\4\12\2\1\62\1\61\1\47\1\45\1\50\1\56"+
    "\1\0\32\1\1\61\1\61\1\61\1\57\1\10\1\0\1\12\1\24"+
    "\1\15\1\30\1\22\1\35\1\43\1\11\1\21\1\63\1\32\1\13"+
    "\1\17\1\27\1\16\1\20\1\44\1\23\1\25\1\14\1\34\1\41"+
    "\1\40\1\42\1\31\1\1\1\61\1\55\1\61\1\57\6\0\1\60"+
    "\32\0\1\60\u15df\0\1\60\u097f\0\13\60\35\0\1\60\1\60\5\0"+
    "\1\60\57\0\1\60\u0fa0\0\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\1\13\2\1\6\3\2\1\6\2\2\1\7\4\2"+
    "\1\10\1\11\2\12\3\5\2\13\1\14\1\13\1\7"+
    "\1\0\1\3\1\10\1\15\1\0\1\5\1\16\3\2"+
    "\1\17\25\2\1\0\3\2\1\17\3\2\4\0\13\2"+
    "\1\12\1\20\2\12\1\0\1\13\1\21\1\22\1\11"+
    "\1\23\1\24\1\0\1\16\20\2\1\25\20\2\1\0"+
    "\6\2\4\0\2\2\1\17\1\2\1\17\3\2\1\0"+
    "\1\15\1\16\20\2\1\17\4\2\1\25\2\2\1\25"+
    "\4\2\1\0\3\2\4\0\5\2\2\0\30\2\1\17"+
    "\4\0\1\25\1\17\1\2\1\26\1\16\14\2\3\0"+
    "\1\2\1\0\4\2\1\17\2\2\3\0\4\2\2\0"+
    "\1\16\2\2\1\0\4\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\64\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\64\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\320\0\u0750"+
    "\0\u0784\0\u07b8\0\64\0\u07ec\0\234\0\u0820\0\64\0\u0854"+
    "\0\u0888\0\64\0\u08bc\0\u08f0\0\u0924\0\u0958\0\150\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\64\0\u12b0\0\64\0\u12e4"+
    "\0\u1318\0\64\0\64\0\64\0\64\0\64\0\u134c\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00"+
    "\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0"+
    "\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40"+
    "\0\64\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\64\0\u1e44\0\u1e78"+
    "\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018"+
    "\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u2288\0\150\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804"+
    "\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4"+
    "\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44"+
    "\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4"+
    "\0\u1b04\0\u2d18\0\u2d4c\0\64\0\u2d80\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c"+
    "\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc"+
    "\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\u30f4\0\u3468"+
    "\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\3\1\14\1\15\1\16\1\3"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\33\2\34\1\35"+
    "\1\36\1\37\1\40\1\3\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\7"+
    "\1\34\1\54\1\3\65\0\2\3\5\0\16\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\2\0"+
    "\1\55\1\56\125\0\1\57\22\0\1\60\1\0\1\61"+
    "\36\0\1\57\24\0\1\62\36\0\1\57\17\0\1\63"+
    "\6\0\16\63\1\0\4\63\1\0\2\63\2\0\5\63"+
    "\16\0\1\63\1\0\2\3\5\0\1\64\15\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\13\3\1\65\1\66\1\67\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\1\3\1\70\11\3\1\71\2\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\2\3\1\72\1\73\2\3\1\74\7\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\13\3\1\67\1\75\1\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\13\3\1\76\2\3\1\0\4\3\1\0\1\77"+
    "\1\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\7\3\1\100\5\3\1\101\1\0\1\102\3\3\1\0"+
    "\1\3\1\67\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\3\3\1\103\1\3\1\104\1\3\1\105\6\3"+
    "\1\0\1\106\3\3\1\0\2\3\2\0\1\3\1\107"+
    "\1\110\2\3\16\0\1\3\1\0\2\3\5\0\12\3"+
    "\1\111\3\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\6\3\1\112\4\3"+
    "\1\113\2\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\4\3\1\114\11\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\12\0\1\115\52\0\2\3\5\0\2\3\1\116\7\3"+
    "\1\117\3\3\1\0\4\3\1\0\1\120\1\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\6\3\1\121"+
    "\2\3\1\122\1\123\3\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\11\3"+
    "\1\124\4\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\13\0\1\125\1\0\1\126\4\0\1\127"+
    "\2\0\1\130\37\0\2\3\5\0\15\3\1\131\1\0"+
    "\1\132\3\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\3\3\1\133\2\3\1\134\2\3"+
    "\1\135\4\3\1\0\1\136\3\3\1\0\1\137\1\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\1\3"+
    "\1\140\14\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\2\3\1\141\13\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\6\3\1\141\7\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\3\3\1\142\2\3\1\143\7\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\45\0\1\144"+
    "\2\0\1\145\60\0\1\144\63\0\1\146\1\0\1\53"+
    "\1\147\5\0\1\150\52\0\1\147\2\0\1\151\60\0"+
    "\1\57\3\0\1\152\57\0\1\57\2\0\1\153\1\0"+
    "\1\152\65\0\1\154\64\0\1\154\56\0\1\155\75\0"+
    "\1\156\3\0\1\56\61\0\5\60\1\0\56\60\6\61"+
    "\1\157\55\61\1\0\1\160\1\63\5\0\16\160\1\0"+
    "\4\160\1\0\2\160\2\0\5\160\16\0\1\160\1\0"+
    "\2\3\5\0\1\3\1\161\14\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\13\3\1\162\2\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\15\3\1\163"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\13\3\1\164\2\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\2\3\1\165\13\3\1\0\2\3\1\67\1\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\3\3\1\166\1\167\10\3\1\131\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\2\3\1\170\3\3\1\171\7\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\16\3\1\0\1\172\3\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\16\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\173\1\0"+
    "\2\3\5\0\6\3\1\174\2\3\1\175\4\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\14\3\1\176\1\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\10\3\1\177\5\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\15\3\1\200"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\4\3\1\201\1\202\7\3\1\203"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\15\3\1\204\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\1\3\1\205\14\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\10\3\1\206"+
    "\5\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\16\3\1\0\1\3\1\207"+
    "\2\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\2\3\1\210\13\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\4\3\1\211\4\3\1\212\4\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\2\3\1\213\1\3\1\214\11\3\1\0\4\3\1\0"+
    "\2\3\2\0\4\3\1\215\16\0\1\3\1\0\2\3"+
    "\5\0\6\3\1\216\7\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\12\3"+
    "\1\217\3\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\2\3\1\220\10\3"+
    "\1\221\2\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\27\0\1\222\35\0\2\3\5\0\7\3"+
    "\1\223\6\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\16\3\1\0\4\3"+
    "\1\0\2\3\2\0\1\67\4\3\16\0\1\3\1\0"+
    "\2\3\5\0\3\3\1\213\12\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\16\3\1\0\4\3\1\0\1\224\1\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\12\3\1\225\3\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\5\3\1\226\10\3\1\0\4\3"+
    "\1\0\1\3\1\227\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\12\3\1\230\3\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\21\0\1\231\60\0"+
    "\1\232\74\0\1\233\74\0\1\234\24\0\2\3\5\0"+
    "\12\3\1\67\3\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\15\3\1\235"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\6\3\1\236\7\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\13\3\1\237\2\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\16\3"+
    "\1\0\1\240\3\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\16\3\1\241\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\16\3\1\0\1\242\3\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\11\3\1\243\4\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\13\3\1\67\2\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\6\3\1\244\7\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\4\3"+
    "\1\205\11\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\45\0\1\147\66\0\1\147\33\0\1\245"+
    "\113\0\1\53\13\0\4\61\1\246\1\61\1\157\55\61"+
    "\1\0\1\160\1\247\5\0\16\160\1\0\4\160\1\0"+
    "\2\160\2\0\5\160\16\0\1\160\1\0\2\3\5\0"+
    "\2\3\1\250\13\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\2\3\1\251"+
    "\13\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\4\3\1\252\11\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\6\3\1\117\7\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\11\3\1\212\4\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\3\3\1\253"+
    "\12\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\5\3\1\254\10\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\15\3\1\255\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\16\3"+
    "\1\0\1\131\3\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\4\3\1\256\11\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\12\3\1\257\3\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\4\3\1\260\11\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\16\3\1\0"+
    "\1\212\3\3\1\0\2\3\2\0\1\3\1\261\3\3"+
    "\16\0\1\3\1\0\2\3\5\0\3\3\1\262\12\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\3\3\1\263\12\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\12\3\1\264\3\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\12\3"+
    "\1\265\3\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\3\3\1\266\12\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\4\3\1\267\11\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\12\3\1\270\3\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\6\3"+
    "\1\67\7\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\4\3\1\251\11\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\11\3\1\271\3\3\1\272\1\0"+
    "\1\3\1\273\2\3\1\0\1\3\1\37\2\0\1\35"+
    "\4\3\16\0\1\3\1\0\2\3\5\0\3\3\1\67"+
    "\12\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\12\3\1\274\3\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\4\3\1\67\11\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\3\3\1\275\12\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\16\3\1\0"+
    "\4\3\1\0\1\276\1\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\16\3\1\0\4\3\1\0\1\277"+
    "\1\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\3\3\1\300\12\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\2\3\1\301"+
    "\13\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\4\3\1\262\11\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\11\3\1\302\4\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\30\0\1\241\34\0"+
    "\2\3\5\0\12\3\1\303\3\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\14\3\1\304\1\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\16\3\1\0"+
    "\4\3\1\0\2\3\1\305\1\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\3\3\1\306\12\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\2\3\1\307\13\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\3\3"+
    "\1\310\12\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\25\0\1\311\65\0\1\312\64\0\1\313"+
    "\54\0\1\314\43\0\2\3\5\0\12\3\1\315\3\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\2\3\1\316\13\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\12\3\1\317\3\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\2\3"+
    "\1\320\13\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\5\3\1\321\10\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\3\3\1\131\12\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\14\3\1\107\1\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\11\0\1\322\53\0\1\160"+
    "\1\247\1\323\4\0\16\160\1\0\4\160\1\0\2\160"+
    "\2\0\5\160\16\0\1\160\1\0\2\3\5\0\3\3"+
    "\1\324\12\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\16\3\1\0\2\3"+
    "\1\67\1\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\13\3\1\325\2\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\2\3\1\326\13\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\1\3"+
    "\1\67\14\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\15\3\1\67\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\11\3\1\327\4\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\5\3\1\316\10\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\12\3\1\330"+
    "\3\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\2\3\1\331\13\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\11\3\1\332\4\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\12\3\1\333\3\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\4\3\1\225"+
    "\11\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\13\3\1\334\2\3\1\0"+
    "\4\3\1\0\2\3\2\0\3\3\1\335\1\3\16\0"+
    "\1\3\1\0\2\3\5\0\16\3\1\0\4\3\1\0"+
    "\1\336\1\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\2\3\1\337\7\3\1\340\3\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\11\3\1\271\4\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\16\3"+
    "\1\0\4\3\1\0\1\3\1\67\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\16\3\1\0\4\3\1\0"+
    "\2\3\2\0\1\341\4\3\16\0\1\3\1\0\2\3"+
    "\5\0\12\3\1\342\3\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\16\3"+
    "\1\0\1\343\3\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\13\3\1\344\2\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\11\3\1\345\4\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\12\3\1\346\3\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\16\3\1\0"+
    "\3\3\1\67\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\16\3\1\0\1\347\3\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\15\3\1\350\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\3\3\1\351\12\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\37\0\1\241\25\0\2\3\5\0\2\3\1\352\13\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\16\3\1\0\4\3\1\0\1\353"+
    "\1\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\16\3\1\0\1\3\1\354\2\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\14\0\1\355\74\0\1\356\73\0"+
    "\1\357\42\0\1\360\50\0\2\3\5\0\4\3\1\361"+
    "\11\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\4\3\1\275\11\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\2\3\1\167\13\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\3\3\1\362\12\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\4\3\1\363"+
    "\11\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\20\0\1\364\45\0\1\323\5\0\1\365\54\0"+
    "\2\3\5\0\4\3\1\366\11\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\2\3\1\367\13\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\14\3\1\243"+
    "\1\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\16\3\1\0\1\370\3\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\5\3\1\371\10\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\4\3"+
    "\1\131\11\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\5\3\1\67\10\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\7\3\1\372\6\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\16\3\1\0\4\3\1\0\1\3\1\373\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\12\3\1\374"+
    "\3\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\16\3\1\0\1\3\1\375"+
    "\2\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\16\3\1\0\1\376\3\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\2\3"+
    "\1\377\13\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\11\3\1\u0100\4\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\2\3\5\0\5\3\1\226\10\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\16\3\1\0\1\3\1\255\2\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\16\3"+
    "\1\0\1\67\3\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\13\3\1\375\2\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\2\3\1\u0101\13\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\16\3\1\0\4\3\1\0\2\3\2\0\3\3\1\275"+
    "\1\3\16\0\1\3\1\0\2\3\5\0\10\3\1\373"+
    "\5\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\12\3\1\275\3\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\13\3\1\131\2\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\3\3\1\212\12\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\16\3\1\u0102"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\36\0"+
    "\1\305\41\0\1\241\65\0\1\u0103\62\0\1\u0104\47\0"+
    "\2\3\5\0\3\3\1\251\12\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\11\3\1\u0105\4\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\1\u0106\6\0\16\u0106\1\0"+
    "\4\u0106\1\0\2\u0106\2\0\5\u0106\16\0\1\u0106\1\0"+
    "\2\3\5\0\1\u0107\15\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\5\3"+
    "\1\212\10\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\16\3\1\0\4\3"+
    "\1\0\1\131\1\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\4\3\1\u0108\11\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\12\3\1\u0109\3\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\2\3\1\u010a"+
    "\13\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\13\3\1\275\2\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\12\3\1\u010b\3\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\5\3\1\u010c\10\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\16\3\1\0"+
    "\1\3\1\u010d\2\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\4\3\1\167\11\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\16\3\1\0\1\275\3\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\35\0\1\u010e\51\0\1\u010f"+
    "\51\0\1\241\53\0\2\3\5\0\6\3\1\344\7\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\1\0\1\u0106\1\u0110\5\0\16\u0106\1\0\4\u0106\1\0"+
    "\2\u0106\2\0\5\u0106\16\0\1\u0106\1\0\2\3\5\0"+
    "\5\3\1\u0111\10\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\12\3\1\u0112"+
    "\3\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\16\3\1\0\1\u0113\3\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\5\3\1\131\10\3\1\0\4\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\1\u0114"+
    "\15\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3\1\0\2\3\5\0\12\3\1\u010d\3\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\6\3\1\271\7\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\23\0\1\u0115\62\0"+
    "\1\u0116\42\0\1\u0106\1\u0110\1\323\4\0\1\u0117\15\u0106"+
    "\1\0\4\u0106\1\0\2\u0106\2\0\5\u0106\16\0\1\u0106"+
    "\1\0\2\3\5\0\6\3\1\u0118\7\3\1\0\4\3"+
    "\1\0\2\3\2\0\5\3\16\0\1\3\1\0\2\3"+
    "\5\0\16\3\1\0\1\3\1\67\2\3\1\0\2\3"+
    "\2\0\5\3\16\0\1\3\1\0\2\3\5\0\4\3"+
    "\1\255\11\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\6\3\1\u0119\7\3"+
    "\1\0\4\3\1\0\2\3\2\0\5\3\16\0\1\3"+
    "\16\0\1\u011a\57\0\1\360\52\0\2\3\5\0\7\3"+
    "\1\u011b\6\3\1\0\4\3\1\0\2\3\2\0\5\3"+
    "\16\0\1\3\1\0\2\3\5\0\16\3\1\0\1\u010a"+
    "\3\3\1\0\2\3\2\0\5\3\16\0\1\3\17\0"+
    "\1\241\45\0\2\3\5\0\10\3\1\u011c\5\3\1\0"+
    "\4\3\1\0\2\3\2\0\5\3\16\0\1\3\1\0"+
    "\2\3\5\0\11\3\1\u011d\4\3\1\0\4\3\1\0"+
    "\2\3\2\0\5\3\16\0\1\3\1\0\2\3\5\0"+
    "\3\3\1\u011e\12\3\1\0\4\3\1\0\2\3\2\0"+
    "\5\3\16\0\1\3\1\0\2\3\5\0\12\3\1\141"+
    "\3\3\1\0\4\3\1\0\2\3\2\0\5\3\16\0"+
    "\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13780];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\24\1\1\11\16\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\11\32\1"+
    "\1\0\7\1\4\0\14\1\1\11\1\1\1\11\1\0"+
    "\1\1\5\11\1\0\42\1\1\0\6\1\4\0\4\1"+
    "\1\11\3\1\1\0\1\11\36\1\1\0\3\1\4\0"+
    "\5\1\2\0\31\1\4\0\3\1\1\11\15\1\3\0"+
    "\1\1\1\0\7\1\3\0\4\1\2\0\3\1\1\0"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Token createToken(String name, String value) {
    return new Token( name, value, yyline);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + yyline);
            }
          case 23: break;
          case 2: 
            { return createToken("STRING", yytext());
            }
          case 24: break;
          case 3: 
            { return createToken("NUMBER", yytext());
            }
          case 25: break;
          case 4: 
            { return createToken("OPERADOR_CONCATENACAO", yytext());
            }
          case 26: break;
          case 5: 
            { return createToken("OPERADOR_ARITMETICO", yytext());
            }
          case 27: break;
          case 6: 
            { 
            }
          case 28: break;
          case 7: 
            { return createToken("DELIMITADOR", "\""+ yytext() + "\"");
            }
          case 29: break;
          case 8: 
            { return createToken("OPERADOR_ATRIBUICAO", yytext());
            }
          case 30: break;
          case 9: 
            { return createToken("OPERADOR_LOGICO", yytext());
            }
          case 31: break;
          case 10: 
            { return createToken("OPERADOR_COMPARACAO", yytext());
            }
          case 32: break;
          case 11: 
            { return createToken("OPERADOR_BITWISE", yytext());
            }
          case 33: break;
          case 12: 
            { return createToken("OPERADOR_TERNARIO", yytext());
            }
          case 34: break;
          case 13: 
            { return createToken("COMENTARIO", yytext());
            }
          case 35: break;
          case 14: 
            { return createToken("VARIAVEL", yytext());
            }
          case 36: break;
          case 15: 
            { return createToken("PALAVRA_RESERVADA", yytext());
            }
          case 37: break;
          case 16: 
            { return createToken("OPERADOR_ARRAY", yytext());
            }
          case 38: break;
          case 17: 
            { return createToken("OPERADOR_INCREMENTO", yytext());
            }
          case 39: break;
          case 18: 
            { return createToken("OPERADOR_OBJETO", yytext());
            }
          case 40: break;
          case 19: 
            { return createToken("TAG_FECHAMENTO", yytext());
            }
          case 41: break;
          case 20: 
            { return createToken("OPERADOR_ESTATICO", yytext());
            }
          case 42: break;
          case 21: 
            { return createToken("TIPO_PRIMITIVO", yytext());
            }
          case 43: break;
          case 22: 
            { return createToken("TAG_ABERTURA", yytext());
            }
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
